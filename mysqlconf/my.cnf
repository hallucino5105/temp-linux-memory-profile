[mysqld]

#--------------------------------------------------------------------
# General
#--------------------------------------------------------------------
server-id = 101

user = mysql

#datadir = /usr/local/mysql
datadir = /var/lib/mysql
#tmpdir = /usr/local/mysql_temp

#socket = /usr/local/mysql/mysql.sock
#pid-file = /usr/local/mysql/mysqld.pid

character-set-server = utf8
collation-server = utf8_general_ci

# 外部ロック(locking), システムロックを使わないようにする。この設定はMyISAMテーブルのみ影響がある。
skip-external-locking
default-storage-engine = innodb
transaction-isolation = READ-COMMITTED


#--------------------------------------------------------------------
# Network
#--------------------------------------------------------------------
port = 3306
skip-name-resolve

# Mysql ThreadPool (6.0 only) or mariadb
#thread_handling = pool-of-threads
#thread_pool_size = 32
#thread_pool_max_threads = 1024
#thread_pool_idle_timeout = 10

max_connections = 300
#wait_timeout = 28800
wait_timeout = 604800
interactive_timeout = 604800

# 非活性の状態から活性状態になるまでの待機時間。
# (seconds to waits for activity on interactive connection)
interactive_timeout = 600

# 'Bad handshake'に応答する前にPacketの接続を待っている時間。
connect_timeout = 10

# Clientからサーバーに送るQueryは一つのPacketで処理される。もし、サーバーに送られてくるQueryの大きさがこの値より小さいと増やす必要がある。
# 特にTableのカラムに BLOB タイプを使っている場合, バイナリ(Binary)の値、この値を増やす必要がある。
#max_allowed_packet = 128MB
max_allowed_packet = 1GB

#--------------------------------------------------------------------
# Logging
#--------------------------------------------------------------------
log_error = /var/log/mysql/mysqld.log
# Aborted connection..のような警告を error Logに書く。 Replicationを使っている場合、このオプションを使うのをお勧めする
log_warnings = 1

general_log = 0
general_log_file = /var/log/mysql/general.log

slow_query_log = 1
long_query_time = 5
slow_query_log_file = /var/log/mysql/slow.log

#log-bin = mysql-bin
#expire_logs_days = 30

log_timestamps = SYSTEM


#--------------------------------------------------------------------
# Cache, Memory
#--------------------------------------------------------------------
# thread_cache_size = threadをcacheにいくつ保存しておくのかを決める
# 基準はQuestionsではなくConnectionsである。
# MySQLは接続終了後のサーバスレッドをいきなり解放せず、次の接続時に再利用
# できるようにキャッシュして置く。このため、切断後の再接続時のオーバーヘッド
# をより軽減することができるのだ。デフォルトは0だが数百程度でもいいようだ。
# 細かいチューニングは実際の稼働状況を把握しないと何とも言えないが、とりあえず
# max_connectionsの１/３ぐらいか
# show statusの(Threads_created / Connections)の結果が
# 0.01 すなわち 1% 以上なら、 thread_cache_size を増やす必要があると判断
# 同時接続者が多ければ多いほどこの値を増やす必要があるが、メモリの使用率も一緒に増える
thread_cache_size = 64

# すべてのThreadが開いてCacheができるTableの数。この値が増えると mysqld は file descriptors を増やす
table_open_cache = 400

# この値は Memory ストレジエンジンに影響を及ぼす。この値は Memory ストレジエンジンで MAX_ROWS 値を計算し使ったりもする。
# また、 MySQL サーバーがQueryを処理するのに、時々臨時テーブルをメモリを生成したりするが、
# その時、生成されるTableは Heap Tableと呼ばれている。 tmp_table_size と共に内部 Heap Tableの大きさに影響を及ぼす。
max_heap_table_size = 32MB

# Memoryに生成される臨時のTableの最大の値。Memoryに生成されるTable値がこの値を超えると MySQLはDiskに MyISAM Tableに変換する。
# Queryに GROUP By が多くて、メモリも十分な状態なら、この値を増やす必要がある。
# この値はユーザーが生成する Memory Tableには影響を与えない。
# 単位は Byte. DefaultはSystemに依存する。
# SHOW GLOBAL STATUS で、 'Created_tmp_disk_tables' と 'Created_tmp_tables' に該当の統計情報が記録されてある。
# Dynamic で設定も可能だ。 SET GLOBAL tmp_table_size = 524288
tmp_table_size = 16MB

# ソートの際に利用される領域。ORDER BYやGROUP BYを多用するのであればこの値も増やした方がいい。
# 各Sectionで整列のために与えられたBufferの大きさ。 この値はどのストレージエンジンに特化されたものではなく、最適化をするための一般的な値だ。
# SHOW GLOBAL STAUS で、秒(より)/ 'Sort_merge_passes' の値が多く感じたらQueryを改善するかIndexを改善する代わりに、この値を増やしてみるのもいい方法だ
# しかし、2MB 以上は設定しないのをお勧めする。大体 64KB ~ 512KB の間が適当である
sort_buffer_size = 4MB

# インデックスを使用する／しないにかかわらず、全文検索の時に使用される領域。
# テーブル全体をスキャンするSQL文を何度も実行する場合はこの値を調整した方がよい。
# ※「インデックスを使用しない場合に使われる」と書かれている場合もあり、どちらだか分からない。後で調べようと思う。
# MyISAM Tableに対して各Threadが sequentail scan をしようとしたときにこの大きさ分、Bufferを割り当てる。
# sequentail scan がよく発生するとこの値を増やす必要がある。
read_buffer_size = 1MB

# ソート後にレコードを読むときに使われる領域で、
# ディスクI/Oが減るためORDER BYの性能向上が期待できる。 1?2Mくらいが妥当？
# MyISAM Tableから Key-sorting 整列によるデータをレコードから読み込むときにDiskから探すのを避けるためにこのBufferを使う。
# ORER BY をたくさん使っているのであれば、この値を増やすと、Performance向上の効果が期待できる
read_rnd_buffer_size = 1MB

# インデックスを用いない全文検索を伴うテーブル結合（フルジョイン）において、
# レコードデータのキャッシュに使われる領域。
# 一回のフルジョインにつき１つのジョインバッファが確保され、SQL文の実行終了とともに解放される。
# インデックスを用いないテーブル結合はパフォーマンスの観点からして避けるべきなので、
# この値は大きくする必要はないようだ。
# Minimum、 index scans, range index scans などを計画したり、Joinをするのに indexの利用ができず、Full Table Scanをする必要がある場合に使われる。
# Full Joinしないといけない状況がある場合、この値を増やすことで、Performanceが上がる効果がある。
join_buffer_size = 8MB

# MySQLの性能向上を図る上でかなり重要なメモリ領域で、
# SELECT文の実行結果をメモリ内にキャッシュする。100?200くらいが推奨されているよう。
# Queryの結果をCacheするためのメモリの量。 パラメタ名とは違ってQueryをCacheすることではなく、処理結果をCacheする。
# Queryの結果をCacheするため、 INSERT, UPDATE, DELETEが頻繁に起こるサーバーでは大きく設定する必要はない。
# 単位は Byte. Defaultは 0(disable). 128MB 以上、設定しない方がいいReplication(Slaveかな？)サーバーで Select のみする場合は、 128MB 以上の設定も可能。
query_cache_size = 64MB

# 一つのQueryごとの結果をCacheする量を制限する。 query_cache_sizeはQueryの結果をCacheする全体のメモリの量を設定するパラメタで
# query_cache_limit は各QueryごとにCacheする結果の量を意味する。 この値より大きいQueryの結果の場合はCacheしないという意味。
query_cache_limit = 2097152

# MySQLではひとつのテーブルにつきひとつのファイルが割り当てられるが、table_cashe_sizeは
# それらのテーブルのキャッシュに使用され、同時実効性をあげるための重要なパラメータとなる。
# MySQLサーバーは一度開いたファイルのポインタをtable_cacheに保存し、次回からの
# アクセスを高速化するのである。目安は同時接続数 x テーブル数。1024?2048が一般的。
table_open_cache = 1800


#--------------------------------------------------------------------
# MyISAM
#--------------------------------------------------------------------
# MyISAMテーブルに対して索引検索をする際にそのインデックス情報を格納する領域。
# MyISAMテーブルを多用する場合はこの値もある程度増やす。
# MyISAM テーブルのインデックスBlock(Index blocks)はBufferされ、すべてのThreadに共有される。
# このIndex BlocksはBufferのためのメモリの量だ。　データベース専用サーバに MyISAM エンジンのみ使う場合
# 全体のメモリの 25%を割り当てても問題ない
key_buffer_size = 256MB

# bulk insert ? INSERT ... SELECT, INSERT ... VALUES (..),(..),... , LOAD_DATA_INFILE などを使うときに
# Bufferを使い、速度をあげられる。
bulk_insert_buffer_size = 8MB

# CREATE INDEX, ALTE TABLE などでIndexを生成したり REPAIR_TABLE をするのにIndexの整列が必要な時、使うBuffer
myisam_sort_buffer_size = 2MB

# REPAIR_TABLE, ALTER_TABLE, LOAD_DATA_INFILE の中で MyISAM Indexを再生成しなければならない時に、許可する臨時ファイルの最大値
#myisam_max_sort_file_size = 256GB
myisam_max_sort_file_size = 16GB

# 予期してないサーバーの中断などでサーバーが再起動されたときにRecoverするかどうかを決めるオプション
# 0, DEFAULT, BACKUP, FORCE, QUICK の値をComma(,)で羅列して使用できる。
myisam_recover_options = DEFAULT


#--------------------------------------------------------------------
# InnoDB behavior
#--------------------------------------------------------------------
# InnoDB テーブルで使うファイルの基本のフォーマットを設定する
# Default Antelope
innodb_file_format = Barracuda

# InnoDBのBackground Threadである、I/O ThreadのRead/WriteのThreadの数を決める
# innodb_read_io_threads のDefault： 4
# innodb_write_io_threads のDefault： 4
innodb_read_io_threads = 16
innodb_write_io_threads = 16

# "SHOW TABLE STATUS", "SHOW INDEX" の情報を INFORMATION_SCHEMAのテーブルの統計に更新する
# この変数が Disable になると大きいテーブルとかIndex、schemaへの接続速度をあげられる
# この変数を Enable するとQueryのPlanするのに役に立ちます。
# Default 1
innodb_stats_on_metadata = 1

# dirty pages のパーセントを超えないために InnoDBは buffer poolをデータFlushを(flush)試します。
# innodb での dirty pages のパーセンテージ
innodb_max_dirty_pages_pct = 90

# InnoDB? apaptive hash index の利用有無を決める
# adaptive hash index 機能は workload に有用
# Default 1
innodb_adaptive_hash_index = 1

# InnoDB buffer pool で dirty pages をFlushする比率を動的に調節するかどうかを決める
# データのflushのタイミングをよりアグレッシブにしてくれる 設定で、builtinのInnoDBだと状況によっては
# writeでI/Oがバーストの活動を避けられる目的で使える
# Default 1
innodb_adaptive_flushing = 1

# 特定の条件について警告をらターンするかエラーをリターンするかを決める strict SQL mode と類似している
# Default 0
innodb_strict_mode = 1

# insert buffer からデータを合わせたり(merge) buffer poolからページを更新？(flush)のような
# InnoDBのBackgroundのタスク(Task)によって実行されるときにI/O 活性の上限値(An upper limit)を設定
# Default 200
innodb_io_capacity = 50000

# auto-increment の値を生成するときに lock mode を決める
# Default 1
innodb_autoinc_lock_mode = 1

# INSERT が発生されると補助インデックスがすぐ反映されずにメモリにBufferingにされる、これを利用するかしないかを決める。
# inserts, deletes, purges, changes, all, noneの中で選べる
# Default all
#innodb_change_buffering = inserts

# このパラメータを設定すると、Old LRUリストに格納されたページに対して
# 再びアクセスが発生しても、指定した時間が経過するまではYoung LRUリストに移動されないようになります。
# Default 0
#innodb_old_blocks_time = 500

# InnoDBバッファプールを複数持つ
# Default 8
#innodb_buffer_pool_instances = 8


#--------------------------------------------------------------------
# InnoDB base
#--------------------------------------------------------------------
# InnoDBをメインで使うなら、一番重要なパラメータ。
# InnoDBに対する各種操作の他、レコードデータなどのキャッシュ領域として利用され、
# 非同期I/Oスレッドやサーバスレッドがアクセスする。InnoDBバッファプール上
# データへのアクセスにはディスクI/Oが発生しないが、バッファプール内に収まり
# きらなくなったデータはディスク上に退避されることになる。
# InnoDBがテーブルもしくはインデックスデータをCacheするためのBuffer Poolサイズ
# ※この値を大きく設定するとDiskのI/Oを減らしてくれる
# InnoDB 専用サーバーなら物理的なメモリの80%を割り当てても問題ない
# Default 134217728 (128MB)
# Dynamic 設定可能。
#innodb_buffer_pool_size = 25GB
#innodb_buffer_pool_size = 64GB
# mod by wakioto 2016/10/31
#innodb_buffer_pool_size = 54GB
innodb_buffer_pool_size = 4GB

# InnoDB のデータファイルの位置を指定
#innodb_data_home_dir = /usr/local/mysql

# InnoDB データファイルとその大きさを指定
innodb_data_file_path = ibdata1:1G:autoextend:max:100G

# 基本的に InnoDBはシステムテーブルスペースと呼ばれるところにすべてのテーブルが生成される。
# この変数を活性化するとシステムテーブルスペースの代わりにデータとインデックスを別途のファイルに保存する。
# 拡張子は .ibd
# Default 0
innodb_file_per_table = 1

# InnoDB システムテーブルが容量いっぱいになったら、拡張するが、拡張する大きさを決める。
# Default 8 MB
#innodb_autoextend_increment = 10MB

# InnoDB redo log ファイルが生成されるディレクトリを指定。生成されるファイル数は innodb_log_files_in_groupで指定。
# InnoDB 値を指定しないと 5MB 大きさの ib_logfile0, ib_logfile1 二つのファイルが生成される。
#innodb_log_group_home_dir = /usr/local/mysql

# InnoDB Shutdownモードを決める設定。この値が 0 なら、InnoDBはFull PURGE, insert Bufferをmerging(反映する)Slow Downになる。
# Default 1
innodb_fast_shutdown = 0

# ロググループのログファイル数を指定
# Default 2
# Dynamic 設定可能。
innodb_log_files_in_group = 2

# ロググループの各ログファイルのサイズを決める。 1MBから innodb_buffer_pool_size/innodb_log_files_in_group で出た値を設定する
# Default 5MB
innodb_log_file_size = 50331648

# InnoDBログパッファはInnoDBテーブルに対する更新ログ、いわゆるトランザクション
# ログを管理し、InnoDB専用スレッドやサーバスレッドがアクセスする領域。
# Oracleで言うとREDOログに相当する。トランザクション終了時（コミット時やロールバック時）、
# バッファがいっぱいになった時、一定時間ごとにディスクに書き込まれる。
# 実行途中のトランザクションの多くはこのバッファで管理される。
# １つのトランザクション内で多くのデータを更新するのであればサイズを大きくした方がいいが、
# それほど気にしなくてもよさそうではある。1?8Mの範囲が推奨されている。
# ログのBufferのためにサイズを指定。たくさん割り当てる必要はないかも。
# Default 8388608 (8MB)
innodb_log_buffer_size = 16MB

# InnoDBテーブルの定義情報など、データディクショナリ情報を格納する。
# この領域が足りなくなったらエラーログに警告を出すとともに、OSのメモリ領域
# から追加で割り当てられる。それほど気にする必要はないが、InnoDBテーブルの
# 数を多くする場合はこの値も多少増やした方がいい、かも。
#innodb_additional_mem_pool_size = 8MB

# XA Transactionで two-phase commit を支援するかどうかを決める。
# 一つのThreadでデータの変更を実行する場合はこのオプションは利用しない方がいい
# Default 1
innodb_support_xa = 1

# 処理を同時に実行できるスレッド数の上限値
# 処理を並列に行うとスループット(単位時間当たり処理量)の向上が期待出来るが、
# 同時に実行中のスレッドがあまりに多すぎるとロックの競合が多発してしまって返って性能を落とす原因になってしまう
# 上限値にThreadが達するとFIFOのQueueに待機状態になる。
# Default 0 (infinite concurrency)
innodb_thread_concurrency = 0

# InnoDB transactionが row lock がかかった時に、待つ時間
# Default 50. 単位は秒(second)
innodb_lock_wait_timeout = 60

# InnoDBで、TransactionがCommitされるたびに、Diskに書くかどうかを決める
# Default 1
innodb_flush_log_at_trx_commit = 2

# MySQL サーバーが起動される際に InnoDBを復旧作業を実行するが, 復旧作業がうまくいかなかったら復旧されない。
# この時、この値を指定してサーバを始めると各数字に沿って復旧のレベルが決められる。
# デフォルトは 0 (強制的な復旧を行わない通常の起動)
#innodb_force_recovery = 0

# UNIX/Linuxにおいてデータファイル、ログファイルの読み書き方式を指定するためのもの
# Bufferの読み書き方式
# Default fdatasync
# Dynamic 設定可能。
innodb_flush_method = O_DIRECT

# この機能を使うと InnoDBはデータを２回保存する、１回目はdoublewrite buffer,
# ２回目は実際の data files 書く
# Default 1
innodb_doublewrite = 1

# Threadがサスペンド(中止される)前に InnoDB Mutex（相互排他ロック）が切れる前に待つ時間？
# Default 30
innodb_sync_spin_loops = 20

# autocmmit = 0 の場合、 InnoDB は "LOCK TABLES"になる。
# もし、この変数を活性化すると autocmmit =0 である状態で "LOCK TABLES" コマンドで
# 内部的に InnoDBはテーブルロック(lock)する。
innodb_table_locks = 1

# InnoDB QueueをJoiningする前に InnoDB Threadをどれぐらい待たせるのかを設定
# innodb_concurrency_ticketsが0になったスレッドは、システム変数innodb_thread_sleep_delayで設定された時間だけ待ってInnoDBキューに加わる。
# Default 10000, 単位は microseconds
innodb_thread_sleep_delay = 1000

# purge(PURGE LOGSログファイルの削除) 処理が遅い時、 INSERT, UPDATE, DELETE 処理をどれぐらい遅延させるかを設定
# Defaultは 0, 単位は millisconds
innodb_max_purge_lag = 0

# 同時にCommitができるThreadの数。0は制限なし
# Defaultは 0
# この設定はRuntimeで0には変更できない
innodb_commit_concurrency = 0

# InnoDB に同時に入る事ができるスレッドの数
# スレッドが InnoDB に入ろうとする時にもし並行処理の限度までスレッド数が達していたら、それらは列になる
# Default 500
innodb_concurrency_tickets = 500

innodb_page_size = 64k

[mysqldump]

#--------------------------------------------------------------------
# mysqldump
#--------------------------------------------------------------------
# TableをDumpするときに、 MySQLはサーバのメモリをBufferingする。
# でも大きいテーブルをDumpするときに、メモリBufferingをするとサーバに問題が起きる可能性がある。
# このメモリBufferingを消すためのパラメタ。
# Default：メモリBuffer使用する
quick

# ユーザプロセスとサーバスレッドの間で、SQL文による問合せやその結果をやりとりする際に
# 使用される領域の最大サイズを指定する。
# これより大きなサイズのデータ通信はできない。
# デフォルトは1Mだが、大きなサイズのデータを扱う場合はこの値も大きくした方がいい。
# Default 1M
#max_allowed_packet = 128MB #33554432
max_allowed_packet = 1GB


[mysql]

#--------------------------------------------------------------------
# mysql console
#--------------------------------------------------------------------
default-character-set = utf8
no-auto-rehash
show-warnings

# paging 機能を支援する。
pager="less -sSRXiM"

# MySQL ClientのPromptを変更する
#prompt=\u@\h:\d\_\R:\m:\\s>


[client]

#--------------------------------------------------------------------
# mysql client
#--------------------------------------------------------------------
#socket  = /usr/local/mysql/mysql.sock
socket  = /var/lib/mysql/mysql.sock
port = 3306

